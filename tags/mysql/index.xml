<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mysql on 后端笔记</title>
    <link>https://convee.github.io/tags/mysql/</link>
    <description>Recent content in mysql on 后端笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://convee.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mysql 知识点</title>
      <link>https://convee.github.io/post/mysql/summary/</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://convee.github.io/post/mysql/summary/</guid>
      <description>SQL 执行流程 Server 层  连接器：TCP 握手后服务器来验证登录用户身份，A 用户创建连接后，管理员对 A 用户权限修改了也不会影响到已经创建的链接权限，必须重新登录 查询缓存：查询后的结果存储位置 分析器：根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法 优化器：多种执行策略可实现目标，系统自动选择最优进行执行 执行器：判断是否有权限将最终任务提交到存储引擎  存储引擎层  InnoDB MyISAM Memory  SQL 执行顺序 BinLog、RedoLog、UndoLog BinLog 记录所有数据库表结构变更以及数据修改的二进制日志，主从数据库同步用到的都是 BinLog 文件，BinLog 日志有三种模式：
STATMENT 模式 ROW 模式 MIXED 模式 主从同步流程  主节点必须启用二进制日志，记录任何修改了数据的事件 从节点开启一个线程（I/O Thread）把自己扮演成 mysql 客户端，通过 mysql 协议，请求主节点的二进制文件中的事件 主节点启动一个线程（dump Thread），检查自己二进制中的事件，跟对方请求的位置对比，如果不带请求位置参数，则主节点会从第一个日志文件中的第一个事件一个一个的发送从节点。 从节点接收到主节点发过来的数据把它放置在中继日志（Relay log ）中。并记录该次请求到主节点的具体的哪一个二进制文件的哪一个位置（主节点二进制文件会有多个）。 从节点启动另一个线程（sql Thread），把 Relay log 中的事件读取出来，并在本地再执行一次。  </description>
    </item>
    
    <item>
      <title>Mysql 创建用户与授权</title>
      <link>https://convee.github.io/post/mysql/grant/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://convee.github.io/post/mysql/grant/</guid>
      <description>创建用户 命令: CREATE USER &#39;username&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39;; 说明：  username：用户名 host：用户可以登录的主机 password：用户登录密码，密码可以为空  例子： CREATE USER &#39;convee&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;; CREATE USER &#39;convee&#39;@&#39;192.168.0.1_&#39; IDENDIFIED BY &#39;123456&#39;; CREATE USER &#39;convee&#39;@&#39;192.168.%.%&#39; IDENTIFIED BY &#39;123456&#39;; CREATE USER &#39;convee&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;; CREATE USER &#39;convee&#39;@&#39;%&#39;; 授权: 命令: GRANT privileges ON databasename.tablename TO &#39;username&#39;@&#39;host&#39; 说明:  privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL databasename：数据库名 tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用表示，如.*  例子: GRANT SELECT, INSERT ON test.user TO &#39;convee&#39;@&#39;%&#39;; GRANT ALL ON *.* TO &#39;convee&#39;@&#39;%&#39;; 注意:  用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令:  GRANT privileges ON databasename.</description>
    </item>
    
    <item>
      <title>Mysql 备份与恢复</title>
      <link>https://convee.github.io/post/mysql/backup/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://convee.github.io/post/mysql/backup/</guid>
      <description>恢复到指定数据库 mysql -hhostname -uusername -ppassword databasename &amp;lt; backup.sql 还原压缩的MySQL数据备份文件 gunzip &amp;lt; backup.sql.gz | mysql -uusername -ppassword databasename 直接将备份导入到新的数据库 mysqldump -uusername -ppassword databasename | mysql -host=192.168.0.1 -C databasename 使用source导入sql文件 mysql &amp;gt; use test mysql &amp;gt; source /data/test_backup.sql </description>
    </item>
    
  </channel>
</rss>
