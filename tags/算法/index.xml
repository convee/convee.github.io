<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 后端笔记</title>
    <link>https://convee.github.io/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 后端笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://convee.github.io/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>算法-二叉树</title>
      <link>https://convee.github.io/post/algorithm/binary-tree/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://convee.github.io/post/algorithm/binary-tree/</guid>
      <description>二叉树遍历  前序遍历：先访问根结点，再前序遍历左子树，再前序遍历右子树 中序遍历：先中序遍历左子树，再访问根结点，再中序遍历右子树 后序遍历：先后序遍历左子树，再后序遍历右子树，再访问根结点  注意点：  以根访问顺序决定是什么遍历 左子树都是优先右子树  前序递归 func preorderTraversal(root *TreeNode) { if root==nil{ return } // 先访问根再访问左右  fmt.Println(root.Val) preorderTraversal(root.Left) preorderTraversal(root.Right) } 前序非递归 // V3：通过非递归遍历 func preorderTraversal(root *TreeNode) []int { // 非递归  if root == nil{ return nil } result:=make([]int,0) stack:=make([]*TreeNode,0) for root!=nil || len(stack)!=0{ for root !=nil{ // 前序遍历，所以先保存结果  result=append(result,root.Val) stack=append(stack,root) root=root.Left } // pop  node:=stack[len(stack)-1] stack=stack[:len(stack)-1] root=node.Right } return result } 中序非递归 // 思路：通过stack 保存已经访问的元素，用于原路返回 func inorderTraversal(root *TreeNode) []int { result := make([]int, 0) if root == nil { return result } stack := make([]*TreeNode, 0) for len(stack) &amp;gt; 0 || root !</description>
    </item>
    
    <item>
      <title>算法-二进制</title>
      <link>https://convee.github.io/post/algorithm/binary/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://convee.github.io/post/algorithm/binary/</guid>
      <description>常见的二进制操作 位运算    符号 描述 运算规则     &amp;amp; 与 两个位都为1时，结果才为1    或 两个位都为0时，结果才为0   ^ 异或 两个位相同为0，相异为1   ~ 取反 0变1，1变0   &amp;laquo; 左移 各二进位全部左移若干位，高位丢弃，低位补0      |右移|各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）
  基本操作  a=a^0=0^a 0=a^a a=a^b^b  交换两个数  a=a^b b=a^b a=a^b  移除最后一个 1  a=n&amp;amp;(n-1)  获取最后一个 1  diff=(n&amp;amp;(n-1))^n  </description>
    </item>
    
    <item>
      <title>算法思维</title>
      <link>https://convee.github.io/post/algorithm/algorithm/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://convee.github.io/post/algorithm/algorithm/</guid>
      <description>学习算法和刷题框架思维 数据结构存储方式 数组（顺序存储）  紧凑连续存储，可以随机访问 通过索引快速找到对应元素 相对节约存储空间 正因为连续存储，内存空间必须一次性分配够，所以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N) 如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)  链表（链式存储）  元素不连续，而是靠指针指向下一个元素的位置，所以不存在数组的扩容问题 如果知道某一元素的前驱和后驱，操作指针即可删除该元素或者插入新元素，时间复杂度 O(1) 正因为存储空间不连续，你无法根据一个索引算出对应元素的地址，所以不能随机访问 由于每个元素必须存储指向前后元素位置的指针，会消耗相对更多的储存空间  数据结构存储方式比较 队列和栈  数组：处理扩容问题 链表：需要更多的内存空间存储节点指针  图  邻接表（链表）：省空间，操作效率不如邻接矩阵 邻接矩阵（二维数组）：判断连通性迅速，如果图稀疏很耗空间  散列表  通过散列函数把键映射到一个大数组中 拉链法需要链表特性，操作简单，需要额外的空间存储指针 线性探查法需要数组特性，以便连续寻址，不需要指针的存储空间，操作复杂  树  数组实现就是「堆」，「堆」是一个完全二叉树，用数组存储不需要节点指针，操作简单 链表实现是常见的树，因为不一定是完全二叉树，所以不适合用数组存储  </description>
    </item>
    
  </channel>
</rss>
