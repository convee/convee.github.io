<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>二叉树 on 后端笔记</title>
    <link>https://convee.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
    <description>Recent content in 二叉树 on 后端笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://convee.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>算法-二叉树</title>
      <link>https://convee.github.io/post/algorithm/binary-tree/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://convee.github.io/post/algorithm/binary-tree/</guid>
      <description>二叉树知识点 二叉树遍历  前序遍历：先访问根结点，再前序遍历左子树，再前序遍历右子树 中序遍历：先中序遍历左子树，再访问根结点，再中序遍历右子树 后序遍历：先后序遍历左子树，再后序遍历右子树，再访问根结点  注意点： * 以根访问顺序决定是什么遍历 * 左子树都是优先右子树
 前序递归  func preorderTraversal(root *TreeNode) { if root==nil{ return } // 先访问根再访问左右 fmt.Println(root.Val) preorderTraversal(root.Left) preorderTraversal(root.Right) }  前序非递归  // V3：通过非递归遍历 func preorderTraversal(root *TreeNode) []int { // 非递归 if root == nil{ return nil } result:=make([]int,0) stack:=make([]*TreeNode,0) for root!=nil || len(stack)!=0{ for root !=nil{ // 前序遍历，所以先保存结果 result=append(result,root.Val) stack=append(stack,root) root=root.Left } // pop node:=stack[len(stack)-1] stack=stack[:len(stack)-1] root=node.Right } return result }  中序非递归  // 思路：通过stack 保存已经访问的元素，用于原路返回 func inorderTraversal(root *TreeNode) []int { result := make([]int, 0) if root == nil { return result } stack := make([]*TreeNode, 0) for len(stack) &amp;gt; 0 || root !</description>
    </item>
    
  </channel>
</rss>
